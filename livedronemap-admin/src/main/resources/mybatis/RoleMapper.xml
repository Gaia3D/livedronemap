<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gaia3d.persistence.RoleMapper">
	
	<!-- Role 총 건수 -->
	<select id="getRoleTotalCount" parameterType="role" resultType="long">
		/* getRoleTotalCount */
		SELECT COUNT(role_id) 
		FROM role
	</select>

	<!-- Role 목록 -->
	<select id="getListRole" parameterType="role" resultType="role">
		/* getListRole */
		SELECT *
		FROM role 
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="role_type != null and role_type != ''">
			role_type = #{role_type}
			</if>
			<if test="use_yn != null and use_yn != ''">
			AND use_yn = #{use_yn}
			</if>
		</trim>
		<choose>
		<when test="order_word != null and order_word != '' and order_value != null and order_value != ''">
		ORDER BY ${order_word} ${order_value}
		</when>
		<otherwise>
		ORDER BY insert_date DESC, role_id DESC
		</otherwise>
		</choose>
		OFFSET #{offset} LIMIT #{limit}
	</select>
	
	<!-- Role 정보 -->
	<select id="getRole" parameterType="long" resultType="role">
		/* getRole */
		SELECT * FROM role WHERE role_id = #{role_id}
	</select>
	
	<!-- 사용자 그룹 전체 Role 에서 해당 그룹의 Role 을 제외한 목록 총 건수 -->
	<!-- TODO A-B 결과를 LIKE 하는것과 성능 비교 후 선택 -->
	<select id="getListExceptUserGroupRoleByGroupIdCount" parameterType="userGroupRole" resultType="long">
		/* getListExceptUserGroupRoleByGroupIdCount */
		SELECT COUNT(role_id)
		FROM (
			SELECT role_id
			FROM role
			WHERE role_type = #{role_type}
				<if test="search_except_role_name != null and search_except_role_name != ''">
				AND role_name LIKE '${search_except_role_name}%'
				</if>
			EXCEPT
			SELECT D.role_id
			FROM user_group_role C, role D
			WHERE C.role_id = D.role_id
				AND C.user_group_id = #{user_group_id}
				AND D.role_type = #{role_type}
		) A
	</select>
	
	<!-- 사용자 그룹 전체 Role 에서 해당 그룹의 Role을 제외한 목록 -->
	<!-- TODO A-B 결과를 LIKE 하는것과 성능 비교 후 선택 -->
	<select id="getListExceptUserGroupRoleByGroupId" parameterType="userGroupRole" resultType="userGroupRole">
		/* getListExceptUserGroupRoleByGroupId */
		SELECT A.*
		FROM (
			SELECT role_id, role_key, role_name, role_type, use_yn, description, insert_date
			FROM role
			WHERE role_type = #{role_type}
				<if test="search_except_role_name != null and search_except_role_name != ''">
				AND role_name LIKE '${search_except_role_name}%'
				</if>
			EXCEPT
			SELECT D.role_id, D.role_key, D.role_name, D.role_type, D.use_yn, D.description, D.insert_date
			FROM user_group_role C, role D
			WHERE C.role_id = D.role_id
				AND C.user_group_id = #{user_group_id}
				AND D.role_type = #{role_type}
		) A
		ORDER BY insert_date DESC
		OFFSET #{offset} LIMIT #{limit}
	</select>
	
	<!-- 사용자 그룹별 Role 목록 총 건수 -->
	<select id="getListUserGroupRoleCount" parameterType="userGroupRole" resultType="long">
		/* getListUserGroupRoleCount */
		SELECT COUNT(A.role_id)
		FROM user_group_role A, role B
		WHERE A.role_id = B.role_id
			<if test="user_group_id != null and user_group_id > 0">
			AND A.user_group_id = #{user_group_id}
			</if>	
			AND B.role_type = #{role_type}
			<if test="search_role_name != null and search_role_name != ''">
			AND role_name LIKE '${search_role_name}%'
			</if>
	</select>
	
	<!-- 사용자 그룹별 Role 목록 -->
	<select id="getListUserGroupRole" parameterType="userGroupRole" resultType="userGroupRole">
		/* getListUserGroupRole */
		SELECT A.*,
			B.role_key, B.role_name, B.role_type, B.use_yn, B.description
		FROM user_group_role A, role B
		WHERE A.role_id = B.role_id
			<if test="user_group_id != null and user_group_id > 0">
			AND A.user_group_id = #{user_group_id}
			</if>
			<if test="search_role_name != null and search_role_name != ''">
			AND role_name LIKE '${search_role_name}%'
			</if>	
			AND B.role_type = #{role_type}
		ORDER BY A.insert_date DESC
		OFFSET #{offset} LIMIT #{limit}
	</select>
	
	<!-- 사용자 그룹 전체 Role 에서 접속한 사용자가 속한 사용자 그룹의 Role 목록 -->
	<select id="getListUserGroupRoleByUserId" parameterType="userGroupRole" resultType="String">
		/* getListUserGroupRoleByUserId */
		SELECT role_key
		FROM user_info A, role B, user_group_role C
		WHERE A.user_id = #{user_id}
			AND A.user_group_id = C.user_group_id
			AND B.role_id = C.role_id
			AND B.use_yn = 'Y'
	</select>
	
	<!-- role_id 최대값 -->
	<select id="getMaxRoleId" resultType="long">
		/* getMaxRoleId */
		SELECT COALESCE(MAX(role_id), 0) + 1 FROM role
	</select>
	
	<!-- user_group_role_id 최대값 -->
	<select id="getMaxUserGroupRoleId" resultType="long">
		/* getMaxUserGroupRoleId */
		SELECT COALESCE(MAX(user_group_role_id), 0) + 1 FROM user_group_role
	</select>
	
	<!-- Role 등록 -->
	<insert id="insertRole" parameterType="role" >
		/* insertRole */
		INSERT INTO role(
			role_id, role_name, role_key, role_type, business_type, use_yn, description
		) values(
			#{role_id}, #{role_name}, #{role_key}, #{role_type}, #{business_type}, #{use_yn}, #{description}
		)
	</insert>
	
	<!-- 선택 사용자 그룹내 Role 등록 -->
	<insert id="insertUserGroupRole" parameterType="userGroupRole" >
		/* insertUserGroupRole */
		INSERT INTO user_group_role(
			user_group_role_id, user_group_id, role_id
		) values(
			#{user_group_role_id}, #{user_group_id}, #{role_id}
		)
	</insert>
	
	<!-- Role 수정 -->
	<update id="updateRole" parameterType="role">
		/* updateRole */
		UPDATE role
		SET role_name = #{role_name},
			role_key = #{role_key},
			role_type = #{role_type},
			use_yn = #{use_yn},
			description = #{description}
		WHERE role_id = #{role_id}
	</update>
	
	<!-- Role 삭제 -->
	<delete id="deleteRole" parameterType="long">
		/* deleteRole */
		DELETE FROM role WHERE role_id = #{role_id}
	</delete>

	<!-- 선택 사용자 그룹내 Role 삭제 -->
	<delete id="deleteUserGroupRole" parameterType="userGroupRole">
		/* deleteUserGroupRole */
		DELETE 
		FROM user_group_role
		WHERE user_group_id = #{user_group_id}
			AND role_id IN
		<foreach collection="role_select_id" item="item" index="index" open="(" close=")" separator=",">
			#{item.value}
		</foreach> 
	</delete>
</mapper>